{"id":"../../../../../node_modules/firebase/storage/tasksnapshot.js","dependencies":[{"name":"/Users/adeolauthman/node_modules/firebase/storage/tasksnapshot.js.map","includedInParent":true,"mtime":1494998756000},{"name":"/Users/adeolauthman/Documents/AdeolasCodingStuff/WebDevelopment/Noteworthy/package.json","includedInParent":true,"mtime":1549253646323},{"name":"/Users/adeolauthman/Documents/AdeolasCodingStuff/WebDevelopment/Noteworthy/.babelrc","includedInParent":true,"mtime":1549225258658},{"name":"/Users/adeolauthman/node_modules/firebase/package.json","includedInParent":true,"mtime":1495915167000}],"generated":{"js":"/*! @license Firebase v4.0.0\nBuild: rev-c054dab\nTerms: https://firebase.google.com/terms/ */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UploadTaskSnapshot = exports.UploadTaskSnapshot = function () {\n    function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {\n        _classCallCheck(this, UploadTaskSnapshot);\n\n        this.bytesTransferred = bytesTransferred;\n        this.totalBytes = totalBytes;\n        this.state = state;\n        this.metadata = metadata;\n        this.task = task;\n        this.ref = ref;\n    }\n\n    _createClass(UploadTaskSnapshot, [{\n        key: 'downloadURL',\n        get: function get() {\n            if (this.metadata !== null) {\n                var urls = this.metadata['downloadURLs'];\n                if (urls != null && urls[0] != null) {\n                    return urls[0];\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        }\n    }]);\n\n    return UploadTaskSnapshot;\n}();\n\n","map":{"version":3,"sources":["../src/storage/tasksnapshot.ts"],"names":["UploadTaskSnapshot","bytesTransferred","totalBytes","state","metadata","task","ref","urls"],"mappings":";;;;;;;;;;IAqBMA,kB,WAAAA,kB;AACJ,gCAAqBC,gBAArB,EAAwDC,UAAxD,EACaC,KADb,EACwCC,QADxC,EAEaC,IAFb,EAEwCC,GAFxC,EAEsD;AAAA;;AAFjC,aAAAL,gBAAA,GAAAA,gBAAA;AAAmC,aAAAC,UAAA,GAAAA,UAAA;AAC3C,aAAAC,KAAA,GAAAA,KAAA;AAA2B,aAAAC,QAAA,GAAAA,QAAA;AAC3B,aAAAC,IAAA,GAAAA,IAAA;AAA2B,aAAAC,GAAA,GAAAA,GAAA;AAAkB;;;;4BAE3C;AACb,gBAAI,KAAKF,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,oBAAIG,OAAO,KAAKH,QAAL,CAAc,cAAd,CAAX;AACA,oBAAIG,QAAQ,IAAR,IAAgBA,KAAK,CAAL,KAAW,IAA/B,EAAqC;AACnC,2BAAOA,KAAK,CAAL,CAAP;AACD,iBAFD,MAEO;AACL,2BAAO,IAAP;AACD;AACF,aAPD,MAOO;AACL,uBAAO,IAAP;AACD;AACF","file":"tasksnapshot.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {TaskState} from './implementation/taskenums';\nimport * as type from './implementation/type';\nimport {Metadata} from './metadata';\nimport {Reference} from './reference';\nimport {UploadTask} from './task';\n\nexport class UploadTaskSnapshot {\n  constructor(readonly bytesTransferred: number, readonly totalBytes: number,\n      readonly state: TaskState, readonly metadata: Metadata|null, \n      readonly task: UploadTask, readonly ref: Reference) {}\n\n  get downloadURL(): string|null {\n    if (this.metadata !== null) {\n      let urls = this.metadata['downloadURLs'];\n      if (urls != null && urls[0] != null) {\n        return urls[0];\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n}\n"]}},"hash":"ca036d8707138c917d6d2ec812f5f25a","cacheData":{"env":{}}}